  - platform: template
#          - "temperature"
#          - "relativeHumidity"
#          - "dewpoint"
#          - "seaLevelPressure"
#          - "windDirection"
#          - "windSpeed"
#          - "visibility"
#          - "precipitationLastHour"
#          - "windChill"
#          - "heatIndex"
    name: "Local Weather"
    unique_id: "local_weather"
    condition_template: >
        {% from 'nws_cond.jinja' import cond %}
        {{ cond(states('sensor.nws_api_current'),is_state('sun.sun','above_horizon')) }}
    temperature_template: "{{ state_attr('sensor.nws_api_current','temperature').value | float (default=0.0) }}"
    temperature_unit: "°C"
    humidity_template: "{{ state_attr('sensor.nws_api_current','relativeHumidity').value | float (default=0.0) }}"
    dew_point_template: "{{ state_attr('sensor.nws_api_current','dewpoint').value | float (default=0.0) }}"
    apparent_temperature_template: "{{ state_attr('sensor.nws_api_current','windChill').value | float (default=0.0) }}"
    pressure_template: "{{ state_attr('sensor.nws_api_current','seaLevelPressure').value | float (default=0.0) }}"
    pressure_unit: "Pa"
    wind_speed_template: "{{ state_attr('sensor.nws_api_current','windSpeed').value | float (default=0.0) }}"
    wind_gust_speed_template: "{{ state_attr('sensor.nws_api_current','windGust').value | float (default=0.0) }}"
    wind_speed_unit: "km/h"
    wind_bearing_template: "{{ state_attr('sensor.nws_api_current','windDirection').value | float (default=0.0) }}"
    visibility_template: "{{ state_attr('sensor.nws_api_current','visibility').value | float (default=0.0) }}"
    visibility_unit: "m"
#    ‘clear-night’
#    ‘cloudy’
#    ‘fog’
#    ‘hail’
#    ‘lightning’
#    ‘lightning-rainy’
#    ‘partlycloudy’
#    ‘pouring’
#    ‘rainy’
#    ‘snowy’
#    ‘snowy-rainy’
#    ‘sunny’
#    ‘windy’
#    ‘windy-variant’
#    ‘exceptional’
    forecast_twice_daily_template: >
        {% from 'nws_cond.jinja' import cond %}
        {%- set ns = namespace(forecast=[]) -%}
        {%- set sensors = [
          'sensor.nws_api_forecast_day_night_0',
          'sensor.nws_api_forecast_day_night_1',
          'sensor.nws_api_forecast_day_night_2',
          'sensor.nws_api_forecast_day_night_3',
          'sensor.nws_api_forecast_day_night_4',
          'sensor.nws_api_forecast_day_night_5',
          'sensor.nws_api_forecast_day_night_6',
          'sensor.nws_api_forecast_day_night_7',
          'sensor.nws_api_forecast_day_night_8',
          'sensor.nws_api_forecast_day_night_9',
          'sensor.nws_api_forecast_day_night_10',
          'sensor.nws_api_forecast_day_night_11',
          'sensor.nws_api_forecast_day_night_12',
          'sensor.nws_api_forecast_day_night_13'
        ] -%}
        {%- for sensor in sensors -%}
            {% set tsd = { 'datetime': state_attr(sensor,'startTime'),
                       'is_daytime': state_attr(sensor,'isDaytime'),
                       'condition': cond(state_attr(sensor,'shortForecast'),state_attr(sensor,'isDaytime')),
                       'temperature': (state_attr(sensor,'temperature')-32)*(5/9),
                       'humidity': state_attr(sensor,'relativeHumidity').value,
                       'precipitation_probability': state_attr(sensor,'probabilityOfPrecipitation').value,
                       'dew_point': (state_attr(sensor,'dewpoint').value)*(9/5)+32
                     } -%}
            {% set ns.forecast = ns.forecast + [tsd] -%}
        {% endfor -%}
        {{ ns.forecast }}
    forecast_hourly_template: >
        {% from 'nws_cond.jinja' import cond %}
        {%- set ns = namespace(forecast=[]) -%}
        {%- set sensors = [
          'sensor.nws_api_forecast_hour_0',
          'sensor.nws_api_forecast_hour_1',
          'sensor.nws_api_forecast_hour_2',
          'sensor.nws_api_forecast_hour_3',
          'sensor.nws_api_forecast_hour_4',
          'sensor.nws_api_forecast_hour_5',
          'sensor.nws_api_forecast_hour_6',
          'sensor.nws_api_forecast_hour_7',
          'sensor.nws_api_forecast_hour_8',
          'sensor.nws_api_forecast_hour_9',
          'sensor.nws_api_forecast_hour_10',
          'sensor.nws_api_forecast_hour_11',
          'sensor.nws_api_forecast_hour_12',
          'sensor.nws_api_forecast_hour_13',
          'sensor.nws_api_forecast_hour_14',
          'sensor.nws_api_forecast_hour_15',
          'sensor.nws_api_forecast_hour_16',
          'sensor.nws_api_forecast_hour_17',
          'sensor.nws_api_forecast_hour_18',
          'sensor.nws_api_forecast_hour_19',
          'sensor.nws_api_forecast_hour_20',
          'sensor.nws_api_forecast_hour_21',
          'sensor.nws_api_forecast_hour_22',
          'sensor.nws_api_forecast_hour_23',
          'sensor.nws_api_forecast_hour_24',
          'sensor.nws_api_forecast_hour_25',
          'sensor.nws_api_forecast_hour_26',
          'sensor.nws_api_forecast_hour_27',
          'sensor.nws_api_forecast_hour_28',
          'sensor.nws_api_forecast_hour_29',
          'sensor.nws_api_forecast_hour_30',
          'sensor.nws_api_forecast_hour_31',
          'sensor.nws_api_forecast_hour_32',
          'sensor.nws_api_forecast_hour_33',
          'sensor.nws_api_forecast_hour_34',
          'sensor.nws_api_forecast_hour_35',
          'sensor.nws_api_forecast_hour_36',
          'sensor.nws_api_forecast_hour_37',
          'sensor.nws_api_forecast_hour_38',
          'sensor.nws_api_forecast_hour_39',
          'sensor.nws_api_forecast_hour_40',
          'sensor.nws_api_forecast_hour_41',
          'sensor.nws_api_forecast_hour_42',
          'sensor.nws_api_forecast_hour_43',
          'sensor.nws_api_forecast_hour_44',
          'sensor.nws_api_forecast_hour_45',
          'sensor.nws_api_forecast_hour_46',
          'sensor.nws_api_forecast_hour_47'
        ] -%}
        {%- for sensor in sensors -%}
            {% set tsd = { 'datetime': state_attr(sensor,'startTime'),
                       'is_daytime': state_attr(sensor,'isDaytime'),
                       'condition': cond(state_attr(sensor,'shortForecast'),state_attr(sensor,'isDaytime')),
                       'temperature': (state_attr(sensor,'temperature')-32)*(5/9),
                       'humidity': state_attr(sensor,'relativeHumidity').value,
                       'precipitation_probability': state_attr(sensor,'probabilityOfPrecipitation').value,
                       'dew_point': (state_attr(sensor,'dewpoint').value)*(9/5)+32
                     } -%}
            {% set ns.forecast = ns.forecast + [tsd] -%}
        {% endfor -%}
        {{ ns.forecast }}
    attribution_template: "Observations at {{ state_attr('sensor.nws_api_current','timestamp') | as_datetime | as_local }} from Station {{ state_attr('sensor.nws_api_station','stationIdentifier') }}-{{ state_attr('sensor.nws_api_station','name') }}"
    
    