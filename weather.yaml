  - platform: template
#          - "temperature"
#          - "relativeHumidity"
#          - "dewpoint"
#          - "seaLevelPressure"
#          - "windDirection"
#          - "windSpeed"
#          - "visibility"
#          - "precipitationLastHour"
#          - "windChill"
#          - "heatIndex"
    name: "Local Weather"
    unique_id: "local_weather"
    condition_template: >
        {%- if is_state('sensor.nws_api_current','Partly Cloudy') or is_state('sensor.nws_api_current','Mostly Clear') or is_state('sensor.nws_api_current','Partly Sunny') -%}
            partlycloudy
        {%- elif is_state('sensor.nws_api_current','Mostly Cloudy') or is_state('sensor.nws_api_current','Cloudy') -%}
            cloudy
        {%- elif is_state('sensor.nws_api_current','Fog/Mist') or is_state('sensor.nws_api_current','Fog') -%}
            fog
        {%- elif is_state('sensor.nws_api_current','Clear') and is_state('sun.sun','above_horizon') -%}
            sunny
        {%- elif is_state('sensor.nws_api_current','Clear') and is_state('sun.sun','below_horizon') -%}
            clear-night
        {%- else -%}
            unknown
        {%- endif -%}
    temperature_template: "{{ state_attr('sensor.nws_api_current','temperature').value | float }}"
    temperature_unit: "°C"
    humidity_template: "{{ state_attr('sensor.nws_api_current','relativeHumidity').value | float }}"
    dew_point_template: "{{ state_attr('sensor.nws_api_current','dewpoint').value | float }}"
    apparent_temperature_template: "{{ state_attr('sensor.nws_api_current','windChill').value | float }}"
    pressure_template: "{{ state_attr('sensor.nws_api_current','seaLevelPressure').value | float }}"
    pressure_unit: "Pa"
    wind_speed_template: "{{ state_attr('sensor.nws_api_current','windSpeed').value | float }}"
    wind_gust_speed_template: "{{ state_attr('sensor.nws_api_current','windGust').value | float }}"
    wind_speed_unit: "km/h"
    wind_bearing_template: "{{ state_attr('sensor.nws_api_current','windDirection').value | float }}"
    visibility_template: "{{ state_attr('sensor.nws_api_current','visibility').value | float }}"
    visibility_unit: "m"
#    ‘clear-night’
#    ‘cloudy’
#    ‘fog’
#    ‘hail’
#    ‘lightning’
#    ‘lightning-rainy’
#    ‘partlycloudy’
#    ‘pouring’
#    ‘rainy’
#    ‘snowy’
#    ‘snowy-rainy’
#    ‘sunny’
#    ‘windy’
#    ‘windy-variant’
#    ‘exceptional’
    forecast_twice_daily_template: >
        {%- macro cond(state, daytime) -%}
        {%- if state == 'Partly Cloudy' or state == 'Mostly Sunny' or state == 'Partly Sunny'-%}
          partlycloudy
        {%- elif state == 'Mostly Cloudy' or state == 'Cloudy' -%}
          cloudy
        {%- elif state == 'Sunny' -%}
          sunny
        {%- elif state == 'Clear' and daytime -%}
          sunny
        {%- elif state == 'Clear' and not daytime -%}
          clear-night
        {%- elif 'Thunderstorm' in state -%}
          lightning-rainy
        {%- elif 'Rain' in state and 'Snow' in state -%}
          snowy-rainy
        {%- elif 'Rain' in state -%}
          rainy
        {%- elif 'Snow' in state -%}
          snowy
        {%- elif 'Fog/Mist' in state  or state == 'Fog' -%}
          fog
        {%- else -%}
          unknown
        {%- endif -%}
        {% endmacro -%}
        {%- set ns = namespace(forecast=[]) -%}
        {%- set sensors = [
          'sensor.nws_api_forecast_day_night_0',
          'sensor.nws_api_forecast_day_night_1',
          'sensor.nws_api_forecast_day_night_2',
          'sensor.nws_api_forecast_day_night_3',
          'sensor.nws_api_forecast_day_night_4',
          'sensor.nws_api_forecast_day_night_5',
          'sensor.nws_api_forecast_day_night_6',
          'sensor.nws_api_forecast_day_night_7',
          'sensor.nws_api_forecast_day_night_8',
          'sensor.nws_api_forecast_day_night_9',
          'sensor.nws_api_forecast_day_night_10',
          'sensor.nws_api_forecast_day_night_11',
          'sensor.nws_api_forecast_day_night_12',
          'sensor.nws_api_forecast_day_night_13'
        ] -%}
        {%- for sensor in sensors -%}
            {% set tsd = { 'datetime': state_attr(sensor,'startTime'),
                       'is_daytime': state_attr(sensor,'isDaytime'),
                       'condition': cond(state_attr(sensor,'shortForecast'),state_attr(sensor,'isDaytime')),
                       'temperature': (state_attr(sensor,'temperature')-32)*(5/9),
                       'humidity': state_attr(sensor,'relativeHumidity').value,
                       'precipitation_probability': state_attr(sensor,'probabilityOfPrecipitation').value,
                       'dew_point': (state_attr(sensor,'dewpoint').value)*(9/5)+32
                     } -%}
            {% set ns.forecast = ns.forecast + [tsd] -%}
        {% endfor -%}
        {{ ns.forecast }}
    attribution_template: "Data from Station {{ state_attr('sensor.nws_api_station','stationIdentifier') }}-{{ state_attr('sensor.nws_api_station','name') }}"